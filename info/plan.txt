1)Парсим конфиг, условно у нас структура котораяя будет хранить конфигурацию сервера, если серваков будет нескольок будем хранить их в векторе или тд.
2)Создаем под каждый сервак структурку sockadd_in.
3)Создаем(socket) слушашие сокеты на каждый сервак, если не создался какой-то из них выводим сообщение об этой ошибке и продолжаем работу сервака. Не забываем про setsockopt и fcntl.
4)Связываем(bind) сокеты с нашими структурками, если падает ошибка, также выводим сообщение о ошибке и продолжаем работу.
5)Выставляем эти сокеты в режим прослушивания(listen), в случае ошибки, дейсвтуем стандартно.
6)Добавляем(FD_SET) все эти сокеты в специальную структуру для select(fd_set) и заполняем нулями(FD_ZERO).
7)Ждем активности на сокетах при помощи select.
8)Если активность на слушашем сокете, то принимаем запроc на соединение(accept) и добавляем созданный сокет в множество активных.
9)Если активность на пользовательском то считываем из него http запрос.
10)Парсим запрос и в зависимости от его содержимого и конфигурации сервера отправляем http ответ.

Как правильно отправить HTTP ответ?
1. Смотрим на URI запроса и ищем самый подходящий в списке Location'шинов, используем нужную конфигурацию.
2 Смотрим какой метод нам пришел:
    2.1 Если пришел некоректный и запрещенный метод, то возврашаем ошибку  405 и заголовок Allow с перечесление разрешенных методов.
        HTTP/1.1 405 Method Not Allowed
        Allow: GET, POST
    2.2 Если работает директива return, то возврашем ответ с кодом 302 и заголовком Location.
        HTTP/1.1 302 Found 
        Location: http://example.com/new-page
    2.3 Пришел запрос с методом GET.
        2.3.1 Если пришел запрос на директорию.
            2.3.1.1 Нашли индексный файл с путем root + uri + index.html(например), возврашаем содержимое этого файла
            2.3.1.2 Не нашли индексный файл и работает директива autoindex, возвращаем специальную страницу
            2.3.1.3 Не нашли индексный файл и не работет директива autoindex, 404
        2.3.2 Пришел запрос на cgi скрипт(скорее всего будет специальная папка), если такой скрипт есть запускаем его и выводим результат в ответ, если нету, то возврашаем ошибку 404.
        2.3.3 Пришел обычный запрос, пытаемся найти файл по пуити root + uri, если нашли, то содержимое, если не нашли, то ошибка 404.
    2.4 Пришел запрос с методом POST, то он должен содержать заголовки Conten-Type, Content-Length, если какой-то из них отсутствует то возвращаем ошибку 400.
        2.4.1 Если URI - это директория, возврашаем ошибку 405.
        2.4.2 Если тело запроса больше, чем указано в директиве client_max_body_size, возврашаем ошибку 413.
        2.4.3 Пришел обычный запроc, просто считываем тело и сохраняем его в специальной папке с любым названием, возврашаем 201 с заголовком Location: "путь".
    2.5 Пришел запрос с методом DELETE. 
        2.5.1 Если URI - это директория, возврашаем ошибку 405.
        2.5.2 Пришел обычный запрос. Пытаемся удалить файл с путем = URI, если его нету возврашаем ошибку 404.
3. Не забываем про директиву error_page.

         
